"""
M√≥dulo principal do dashboard interativo de indicadores econ√¥micos brasileiros.

Este m√≥dulo implementa o dashboard interativo com visualiza√ß√µes, filtros,
compara√ß√µes e proje√ß√µes para indicadores econ√¥micos brasileiros.
"""
import os
import sys
import json
import logging
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Any, Tuple

# CONFIGURA√á√ÉO DA P√ÅGINA STREAMLIT
st.set_page_config(
    page_title="Dashboard de Indicadores Socioecon√¥micos Brasileiros",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Detectar e configurar caminhos automaticamente
def setup_paths():
    """Configura os caminhos de importa√ß√£o automaticamente"""
    current_file = os.path.abspath(__file__)
    current_dir = os.path.dirname(current_file)
    
    # Procurar pelo diret√≥rio raiz do projeto (que cont√©m 'src')
    projeto_root = current_dir
    while projeto_root != os.path.dirname(projeto_root):  # N√£o chegou na raiz do sistema
        if os.path.exists(os.path.join(projeto_root, 'src')):
            break
        projeto_root = os.path.dirname(projeto_root)
    
    # Se n√£o encontrou, assumir que est√° em src/visualizacao
    if not os.path.exists(os.path.join(projeto_root, 'src')):
        projeto_root = os.path.dirname(os.path.dirname(current_dir))
    
    src_path = os.path.join(projeto_root, 'src')
    
    # Adicionar caminhos ao PYTHONPATH
    if src_path not in sys.path:
        sys.path.insert(0, src_path)
    if projeto_root not in sys.path:
        sys.path.insert(0, projeto_root)
    
    return projeto_root, src_path

# Configurar caminhos
try:
    PROJETO_ROOT, SRC_PATH = setup_paths()
    # Remover st.success() daqui para evitar conflito com set_page_config
    print(f"‚úÖ Caminhos configurados: {PROJETO_ROOT}")  # Log no console em vez de Streamlit
except Exception as e:
    print(f"‚ùå Erro ao configurar caminhos: {e}")
    PROJETO_ROOT = os.getcwd()
    SRC_PATH = os.path.join(PROJETO_ROOT, 'src')

# Importar utilit√°rios
try:
    from utils.cache import cache_manager, dataframe_cache
    from utils.config import config_manager
    print("‚úÖ Utilit√°rios importados com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è Erro ao importar utilit√°rios: {e}")
    # Criar mocks simples
    class MockCache:
        def get(self, key): return None
        def set(self, key, value, ttl=None): pass
        def clear(self): pass
    
    class MockConfig:
        def get(self, key, default=None): return default
        def obter_config_indicador(self, ind): return {'nome': ind, 'cor': '#666', 'unidade': ''}
    
    cache_manager = MockCache()
    dataframe_cache = MockCache()
    config_manager = MockConfig()

# Importar m√≥dulos de dados
try:
    from dados.extratores.bcb import ExtratorBCB
    from dados.extratores.ibge import ExtratorIBGE
    from dados.processadores.previsao import PrevisorSeriesTemporal
    print("‚úÖ M√≥dulos de dados importados com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è Erro ao importar m√≥dulos de dados: {e}")
    # Criar classes mock para demonstra√ß√£o
    class MockExtrator:
        def __init__(self, *args, **kwargs): pass
        def obter_dados(self, *args, **kwargs): return pd.DataFrame()
    
    class MockPrevisor:
        def __init__(self, *args, **kwargs): pass
        def gerar_previsao(self, *args, **kwargs): return pd.DataFrame(), {}
    
    ExtratorBCB = MockExtrator
    ExtratorIBGE = MockExtrator
    PrevisorSeriesTemporal = MockPrevisor
    
    # Agora podemos usar st.warning() pois set_page_config j√° foi executado
    st.warning("‚ö†Ô∏è Executando em modo de demonstra√ß√£o com dados mock")

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constantes
DIRETORIO_DADOS = os.path.join(PROJETO_ROOT, "data")

def verificar_ambiente():
    """Verifica se o ambiente est√° configurado corretamente"""
    problemas = []
    
    # Verificar diret√≥rio de dados
    if not os.path.exists(DIRETORIO_DADOS):
        problemas.append(f"Diret√≥rio de dados n√£o encontrado: {DIRETORIO_DADOS}")
    
    # Verificar arquivos de dados essenciais
    arquivos_essenciais = ['ipca.json', 'selic.json', 'cambio_ptax_venda.json']
    for arquivo in arquivos_essenciais:
        caminho = os.path.join(DIRETORIO_DADOS, arquivo)
        if not os.path.exists(caminho):
            problemas.append(f"Arquivo de dados n√£o encontrado: {arquivo}")
    
    return problemas

@st.cache_data(ttl=1800)  # Cache por 30 minutos
def carregar_dados() -> Dict[str, pd.DataFrame]:
    """
    Carrega todos os dados dos indicadores econ√¥micos
    
    Returns:
        Dicion√°rio com DataFrames dos indicadores
    """
    logger.info("Carregando dados dos indicadores...")
    
    # Verificar cache primeiro
    dados_cache = cache_manager.get('dados_indicadores')
    if dados_cache is not None:
        logger.info("Dados carregados do cache")
        return dados_cache
    
    # Inicializar dicion√°rio com DataFrames vazios
    dados_indicadores = {
        'ipca': pd.DataFrame(),
        'selic': pd.DataFrame(),
        'cambio': pd.DataFrame(),
        'deficit_primario': pd.DataFrame(),
        'iof': pd.DataFrame(),
        'pib': pd.DataFrame(),
        'desemprego': pd.DataFrame()
    }
    
    try:
        # Mapeamento de indicadores para arquivos
        arquivos_dados = {
            'ipca': 'ipca.json',
            'selic': 'selic.json',
            'cambio': 'cambio_ptax_venda.json',
            'deficit_primario': 'deficit_primario.json',
            'iof': 'arrecadacao_iof.json',
            'pib': 'pib.json',
            'desemprego': 'desemprego.json'
        }
        
        # Carregar cada arquivo
        for id_indicador, nome_arquivo in arquivos_dados.items():
            caminho_arquivo = os.path.join(DIRETORIO_DADOS, nome_arquivo)
            
            if os.path.exists(caminho_arquivo):
                try:
                    with open(caminho_arquivo, 'r', encoding='utf-8') as f:
                        dados_json = json.load(f)
                    
                    if dados_json:
                        df = pd.DataFrame(dados_json)
                        if 'data' in df.columns:
                            df['data'] = pd.to_datetime(df['data'])
                            df = df.sort_values('data')
                        dados_indicadores[id_indicador] = df
                        logger.info(f"Carregado {id_indicador}: {len(df)} registros")
                    
                except Exception as e:
                    logger.error(f"Erro ao carregar {nome_arquivo}: {e}")
                    dados_indicadores[id_indicador] = pd.DataFrame()
            else:
                logger.warning(f"Arquivo n√£o encontrado: {nome_arquivo}")
        
        # Salvar no cache
        cache_manager.set('dados_indicadores', dados_indicadores, ttl=1800)
        logger.info("Dados salvos no cache")
        
    except Exception as e:
        logger.error(f"Erro geral ao carregar dados: {e}")
        # Em caso de erro, retornar DataFrames vazios
        pass
    
    return dados_indicadores

@st.cache_data(ttl=1800)
def atualizar_dados_bcb():
    """Atualiza dados do BCB via API"""
    try:
        logger.info("Atualizando dados do BCB...")
        
        # Verificar cache
        dados_cache = cache_manager.get('dados_bcb_atualizados')
        if dados_cache is not None:
            return dados_cache
        
        # Inicializar dicion√°rio com DataFrames vazios
        dados_indicadores = {
            'ipca': pd.DataFrame(),
            'selic': pd.DataFrame(),
            'cambio': pd.DataFrame(),
            'deficit_primario': pd.DataFrame(),
            'iof': pd.DataFrame(),
            'pib': pd.DataFrame(),
            'desemprego': pd.DataFrame()
        }
        
        try:
            # Criar extrator BCB
            extrator_bcb = ExtratorBCB(diretorio_dados=DIRETORIO_DADOS)
            
            logger.info("Dados do BCB atualizados com sucesso")
            
        except Exception as e:
            logger.error(f"Erro ao atualizar dados do BCB: {e}")
        
        # Salvar no cache
        cache_manager.set('dados_bcb_atualizados', dados_indicadores, ttl=1800)
        
        return dados_indicadores
        
    except Exception as e:
        logger.error(f"Erro ao atualizar dados do BCB: {e}")
        return carregar_dados()

def obter_coluna_valor(df: pd.DataFrame, indicador: str) -> str:
    """
    Determina qual coluna usar para o valor do indicador
    
    Args:
        df: DataFrame do indicador
        indicador: ID do indicador
        
    Returns:
        Nome da coluna de valor
    """
    if df.empty:
        return 'valor'
    
    # Mapeamento de colunas preferenciais por indicador
    colunas_preferenciais = {
        'ipca': ['valor', 'variacao_mensal', 'indice'],
        'selic': ['valor', 'taxa', 'meta_selic'],
        'cambio': ['valor', 'cotacao_compra', 'cotacao_venda'],
        'deficit_primario': ['valor', 'resultado_primario'],
        'iof': ['valor', 'arrecadacao'],
        'pib': ['valor', 'variacao_trimestral', 'pib_variacao'],
        'desemprego': ['valor', 'taxa_desocupacao', 'desemprego']
    }
    
    colunas_disponiveis = df.columns.tolist()
    colunas_candidatas = colunas_preferenciais.get(indicador, ['valor'])
    
    # Procurar primeira coluna dispon√≠vel
    for coluna in colunas_candidatas:
        if coluna in colunas_disponiveis:
            return coluna
    
    # Se n√£o encontrou, usar primeira coluna num√©rica
    for coluna in colunas_disponiveis:
        if coluna != 'data' and df[coluna].dtype in ['int64', 'float64']:
            return coluna
    
    # Fallback
    return 'valor' if 'valor' in colunas_disponiveis else colunas_disponiveis[0]

def criar_grafico_linha(df: pd.DataFrame, indicador: str, config: Dict[str, Any]) -> go.Figure:
    """
    Cria gr√°fico de linha para um indicador
    
    Args:
        df: DataFrame com os dados
        indicador: ID do indicador
        config: Configura√ß√£o do indicador
        
    Returns:
        Figura do Plotly
    """
    if df.empty:
        fig = go.Figure()
        fig.add_annotation(
            text="Dados n√£o dispon√≠veis",
            xref="paper", yref="paper",
            x=0.5, y=0.5, showarrow=False
        )
        return fig
    
    coluna_valor = obter_coluna_valor(df, indicador)
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df['data'],
        y=df[coluna_valor],
        mode='lines+markers',
        name=config.get('nome', indicador),
        line=dict(color=config.get('cor', '#1f77b4'), width=2),
        marker=dict(size=4),
        hovertemplate=f"<b>{config.get('nome', indicador)}</b><br>" +
                     "Data: %{x}<br>" +
                     f"Valor: %{{y:.2f}} {config.get('unidade', '')}<br>" +
                     "<extra></extra>"
    ))
    
    fig.update_layout(
        title=f"{config.get('nome', indicador)} - S√©rie Hist√≥rica",
        xaxis_title="Data",
        yaxis_title=f"{config.get('nome', indicador)} ({config.get('unidade', '')})",
        hovermode='x unified',
        showlegend=False,
        height=400
    )
    
    return fig

def criar_grafico_comparacao(dados: Dict[str, pd.DataFrame], indicadores_selecionados: List[str]) -> go.Figure:
    """
    Cria gr√°fico de compara√ß√£o entre m√∫ltiplos indicadores
    
    Args:
        dados: Dicion√°rio com DataFrames dos indicadores
        indicadores_selecionados: Lista de indicadores para comparar
        
    Returns:
        Figura do Plotly
    """
    fig = go.Figure()
    
    for indicador in indicadores_selecionados:
        if indicador in dados and not dados[indicador].empty:
            df = dados[indicador]
            config = config_manager.obter_config_indicador(indicador)
            coluna_valor = obter_coluna_valor(df, indicador)
            
            fig.add_trace(go.Scatter(
                x=df['data'],
                y=df[coluna_valor],
                mode='lines',
                name=config.get('nome', indicador),
                line=dict(color=config.get('cor', '#1f77b4'), width=2),
                hovertemplate=f"<b>{config.get('nome', indicador)}</b><br>" +
                             "Data: %{x}<br>" +
                             f"Valor: %{{y:.2f}} {config.get('unidade', '')}<br>" +
                             "<extra></extra>"
            ))
    
    fig.update_layout(
        title="Compara√ß√£o de Indicadores",
        xaxis_title="Data",
        yaxis_title="Valor",
        hovermode='x unified',
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

def gerar_previsao_indicador(df: pd.DataFrame, indicador: str, periodos: int = 24) -> Tuple[pd.DataFrame, Dict]:
    """
    Gera previs√£o para um indicador usando Prophet
    
    Args:
        df: DataFrame com dados hist√≥ricos
        indicador: ID do indicador
        periodos: N√∫mero de per√≠odos para prever
        
    Returns:
        Tupla com DataFrame de previs√£o e m√©tricas
    """
    if df.empty or len(df) < 10:
        return pd.DataFrame(), {}
    
    try:
        previsor = PrevisorSeriesTemporal()
        df_previsao, metricas = previsor.gerar_previsao(
            dados=df,
            coluna_data='data',
            coluna_valor=obter_coluna_valor(df, indicador),
            periodos_futuros=periodos
        )
        
        return df_previsao, metricas
        
    except Exception as e:
        logger.error(f"Erro ao gerar previs√£o para {indicador}: {e}")
        return pd.DataFrame(), {}

def criar_grafico_previsao(df_historico: pd.DataFrame, df_previsao: pd.DataFrame, 
                          indicador: str, config: Dict[str, Any]) -> go.Figure:
    """
    Cria gr√°fico com dados hist√≥ricos e previs√£o
    
    Args:
        df_historico: DataFrame com dados hist√≥ricos
        df_previsao: DataFrame com previs√£o
        indicador: ID do indicador
        config: Configura√ß√£o do indicador
        
    Returns:
        Figura do Plotly
    """
    fig = go.Figure()
    
    if not df_historico.empty:
        coluna_valor = obter_coluna_valor(df_historico, indicador)
        
        # Dados hist√≥ricos
        fig.add_trace(go.Scatter(
            x=df_historico['data'],
            y=df_historico[coluna_valor],
            mode='lines+markers',
            name='Hist√≥rico',
            line=dict(color=config.get('cor', '#1f77b4'), width=2),
            marker=dict(size=4)
        ))
    
    if not df_previsao.empty and 'ds' in df_previsao.columns:
        # Previs√£o
        fig.add_trace(go.Scatter(
            x=df_previsao['ds'],
            y=df_previsao['yhat'],
            mode='lines',
            name='Previs√£o',
            line=dict(color='red', width=2, dash='dash')
        ))
        
        # Intervalo de confian√ßa
        if 'yhat_lower' in df_previsao.columns and 'yhat_upper' in df_previsao.columns:
            fig.add_trace(go.Scatter(
                x=df_previsao['ds'],
                y=df_previsao['yhat_upper'],
                mode='lines',
                line=dict(width=0),
                showlegend=False,
                hoverinfo='skip'
            ))
            
            fig.add_trace(go.Scatter(
                x=df_previsao['ds'],
                y=df_previsao['yhat_lower'],
                mode='lines',
                line=dict(width=0),
                fill='tonexty',
                fillcolor='rgba(255,0,0,0.2)',
                name='Intervalo de Confian√ßa',
                hoverinfo='skip'
            ))
    
    fig.update_layout(
        title=f"{config.get('nome', indicador)} - Proje√ß√£o de IPCA para os pr√≥ximos 2 anos",
        xaxis_title="Data",
        yaxis_title=f"{config.get('nome', indicador)} ({config.get('unidade', '')})",
        hovermode='x unified',
        height=500
    )
    
    return fig

def exibir_metricas_indicador(df: pd.DataFrame, indicador: str, config: Dict[str, Any]):
    """
    Exibe m√©tricas resumidas de um indicador
    
    Args:
        df: DataFrame do indicador
        indicador: ID do indicador
        config: Configura√ß√£o do indicador
    """
    if df.empty:
        st.warning(f"Dados n√£o dispon√≠veis para {config.get('nome', indicador)}")
        return
    
    coluna_valor = obter_coluna_valor(df, indicador)
    
    # Calcular m√©tricas
    valor_atual = df[coluna_valor].iloc[-1] if len(df) > 0 else 0
    valor_anterior = df[coluna_valor].iloc[-2] if len(df) > 1 else valor_atual
    variacao = valor_atual - valor_anterior
    variacao_pct = (variacao / valor_anterior * 100) if valor_anterior != 0 else 0
    
    media = df[coluna_valor].mean()
    maximo = df[coluna_valor].max()
    minimo = df[coluna_valor].min()
    
    # Exibir m√©tricas em colunas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="Valor Atual",
            value=f"{valor_atual:.2f} {config.get('unidade', '')}",
            delta=f"{variacao:+.2f} ({variacao_pct:+.1f}%)"
        )
    
    with col2:
        st.metric(
            label="M√©dia Hist√≥rica",
            value=f"{media:.2f} {config.get('unidade', '')}"
        )
    
    with col3:
        st.metric(
            label="M√°ximo",
            value=f"{maximo:.2f} {config.get('unidade', '')}"
        )
    
    with col4:
        st.metric(
            label="M√≠nimo",
            value=f"{minimo:.2f} {config.get('unidade', '')}"
        )

def main():
    """Fun√ß√£o principal do dashboard"""
    try:
        # Verificar ambiente
        problemas = verificar_ambiente()
        if problemas:
            st.error("‚ö†Ô∏è Problemas detectados no ambiente:")
            for problema in problemas:
                st.error(f"‚Ä¢ {problema}")
            st.info("üí° Executando com dados de demonstra√ß√£o")
        
        # T√≠tulo principal
        st.title("üìä Term√¥metro da Economia Brasileira")
        st.markdown("### Dashboard Interativo de Indicadores Econ√¥micos")
        
        # Sidebar para controles
        with st.sidebar:
            st.header("üéõÔ∏è Controles")
            
            # Atualiza√ß√£o de dados
            if st.button("üîÑ Atualizar Dados"):
                cache_manager.clear()
                st.rerun()
            
            # Sele√ß√£o de indicadores
            st.subheader("üìà Indicadores")
            
            # Configura√ß√£o dos indicadores
            config_indicadores = {
                'ipca': {
                    'nome': 'IPCA',
                    'unidade': '%',
                    'cor': '#FF6B6B',
                    'descricao': '√çndice de Pre√ßos ao Consumidor Amplo'
                },
                'selic': {
                    'nome': 'Taxa Selic',
                    'unidade': '% a.a.',
                    'cor': '#4ECDC4',
                    'descricao': 'Taxa b√°sica de juros da economia'
                },
                'cambio': {
                    'nome': 'C√¢mbio USD/BRL',
                    'unidade': 'R$',
                    'cor': '#45B7D1',
                    'descricao': 'Taxa de c√¢mbio D√≥lar/Real'
                },
                'deficit_primario': {
                    'nome': 'D√©ficit Prim√°rio',
                    'unidade': 'R$ bi',
                    'cor': '#96CEB4',
                    'descricao': 'Resultado prim√°rio do governo'
                },
                'iof': {
                    'nome': 'Arrecada√ß√£o IOF',
                    'unidade': 'R$ mi',
                    'cor': '#FFEAA7',
                    'descricao': 'Imposto sobre Opera√ß√µes Financeiras'
                },
                'pib': {
                    'nome': 'PIB (Amostra)',
                    'unidade': '%',
                    'cor': '#DDA0DD',
                    'descricao': 'Produto Interno Bruto - varia√ß√£o trimestral'
                },
                'desemprego': {
                    'nome': 'Taxa de Desemprego (Amostra)',
                    'unidade': '%',
                    'cor': '#F8B500',
                    'descricao': 'Taxa de desocupa√ß√£o'
                }
            }
            
            opcoes_indicadores = list(config_indicadores.keys())
            nomes_indicadores = [config_indicadores[ind]['nome'] for ind in opcoes_indicadores]
            
            indicadores_selecionados = st.multiselect(
                "Selecione os indicadores:",
                options=opcoes_indicadores,
                format_func=lambda x: config_indicadores[x]['nome'],
                default=['deficit_primario', 'iof', 'ipca'],
                help="Escolha quais indicadores visualizar"
            )
            
            if not indicadores_selecionados:
                indicadores_selecionados = ['deficit_primario', 'iof', 'ipca']
            
            # Per√≠odo de an√°lise
            st.subheader("üìÖ Per√≠odo")
            periodo_meses = st.slider(
                "√öltimos meses:",
                min_value=6,
                max_value=60,
                value=24,
                help="Per√≠odo para an√°lise dos dados"
            )
        
        # Carregar dados
        with st.spinner("Carregando dados..."):
            try:
                dados_indicadores = carregar_dados()
            except Exception as e:
                logger.error(f"Erro ao carregar dados: {e}")
                st.error(f"Erro ao carregar dados: {e}")
                try:
                    dados_indicadores = atualizar_dados_bcb()
                except Exception as e2:
                    logger.error(f"Erro ao atualizar dados do BCB: {e2}")
                    # Fallback para dados vazios
                    dados_indicadores = {
                        'ipca': pd.DataFrame(),
                        'selic': pd.DataFrame(),
                        'cambio': pd.DataFrame(),
                        'deficit_primario': pd.DataFrame(),
                        'iof': pd.DataFrame(),
                        'pib': pd.DataFrame(),
                        'desemprego': pd.DataFrame()
                    }
        
        # Abas principais
        tab1, tab2, tab3 = st.tabs(["üìä Vis√£o Geral", "üìà An√°lise Individual", "üîÆ Proje√ß√µes"])
        
        with tab1:
            st.header("üìä Vis√£o Geral dos Indicadores")
            
            # Gr√°fico de compara√ß√£o
            if indicadores_selecionados:
                fig_comparacao = criar_grafico_comparacao(dados_indicadores, indicadores_selecionados)
                st.plotly_chart(fig_comparacao, use_container_width=True)
            
            # M√©tricas resumidas
            st.subheader("üìã Resumo dos Indicadores")
            
            cols = st.columns(min(len(indicadores_selecionados), 3))
            for i, indicador in enumerate(indicadores_selecionados):
                with cols[i % 3]:
                    config = config_indicadores.get(indicador, {})
                    df = dados_indicadores.get(indicador, pd.DataFrame())
                    
                    if not df.empty:
                        coluna_valor = obter_coluna_valor(df, indicador)
                        valor_atual = df[coluna_valor].iloc[-1]
                        
                        st.metric(
                            label=config.get('nome', indicador),
                            value=f"{valor_atual:.2f} {config.get('unidade', '')}",
                            help=config.get('descricao', '')
                        )
                    else:
                        st.metric(
                            label=config.get('nome', indicador),
                            value="N/A",
                            help="Dados n√£o dispon√≠veis"
                        )
        
        with tab2:
            st.header("üìà An√°lise Individual dos Indicadores")
            
            # Seletor de indicador para an√°lise detalhada
            indicador_analise = st.selectbox(
                "Selecione um indicador para an√°lise detalhada:",
                options=indicadores_selecionados,
                format_func=lambda x: config_indicadores[x]['nome'],
                help="Escolha um indicador para an√°lise aprofundada"
            )
            
            if indicador_analise:
                config = config_indicadores[indicador_analise]
                df = dados_indicadores.get(indicador_analise, pd.DataFrame())
                
                st.subheader(f"üìä {config['nome']}")
                st.markdown(f"**Descri√ß√£o:** {config['descricao']}")
                
                if not df.empty:
                    # Filtrar por per√≠odo
                    data_limite = datetime.now() - timedelta(days=periodo_meses * 30)
                    df_filtrado = df[df['data'] >= data_limite] if 'data' in df.columns else df
                    
                    # M√©tricas
                    exibir_metricas_indicador(df_filtrado, indicador_analise, config)
                    
                    # Gr√°fico
                    fig = criar_grafico_linha(df_filtrado, indicador_analise, config)
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Tabela de dados
                    with st.expander("üìã Dados Detalhados"):
                        st.dataframe(df_filtrado.tail(20), use_container_width=True)
                else:
                    st.warning(f"Dados n√£o dispon√≠veis para {config['nome']}")
        
        with tab3:
            st.header("üîÆ Proje√ß√µes dos Indicadores")
            
            # Seletor de indicador para proje√ß√£o
            indicador_projecao = st.selectbox(
                "Selecione um indicador para proje√ß√£o:",
                options=indicadores_selecionados,
                format_func=lambda x: config_indicadores[x]['nome'],
                help="Escolha um indicador para gerar proje√ß√µes"
            )
            
            if indicador_projecao:
                config = config_indicadores[indicador_projecao]
                df = dados_indicadores.get(indicador_projecao, pd.DataFrame())
                
                st.subheader(f"üîÆ Proje√ß√£o: {config['nome']}")
                
                if not df.empty and len(df) >= 10:
                    # Par√¢metros da proje√ß√£o
                    col1, col2 = st.columns(2)
                    with col1:
                        periodos_projecao = st.slider(
                            "Per√≠odos para projetar:",
                            min_value=6,
                            max_value=36,
                            value=24,
                            help="N√∫mero de per√≠odos futuros para projetar"
                        )
                    
                    with col2:
                        if st.button("üöÄ Gerar Proje√ß√£o"):
                            with st.spinner("Gerando proje√ß√£o..."):
                                df_previsao, metricas = gerar_previsao_indicador(
                                    df, indicador_projecao, periodos_projecao
                                )
                                
                                if not df_previsao.empty:
                                    # Gr√°fico de proje√ß√£o
                                    fig_previsao = criar_grafico_previsao(
                                        df, df_previsao, indicador_projecao, config
                                    )
                                    st.plotly_chart(fig_previsao, use_container_width=True)
                                    
                                    # M√©tricas da proje√ß√£o
                                    if metricas:
                                        st.subheader("üìä M√©tricas da Proje√ß√£o")
                                        col1, col2, col3 = st.columns(3)
                                        
                                        with col1:
                                            if 'mae' in metricas:
                                                st.metric("MAE", f"{metricas['mae']:.4f}")
                                        
                                        with col2:
                                            if 'mape' in metricas:
                                                st.metric("MAPE", f"{metricas['mape']:.2f}%")
                                        
                                        with col3:
                                            if 'rmse' in metricas:
                                                st.metric("RMSE", f"{metricas['rmse']:.4f}")
                                    
                                    # Tabela de proje√ß√µes
                                    with st.expander("üìã Dados da Proje√ß√£o"):
                                        st.dataframe(df_previsao.head(20), use_container_width=True)
                                else:
                                    st.error("N√£o foi poss√≠vel gerar a proje√ß√£o. Verifique os dados.")
                else:
                    st.warning(f"Dados insuficientes para proje√ß√£o de {config['nome']} (m√≠nimo: 10 registros)")
        
        # Rodap√© com informa√ß√µes
        st.markdown("---")
        
        # Se√ß√£o de cr√©ditos e fontes
        col1, col2 = st.columns([2, 1])
        
        with col1:
            with st.expander("üìä Fontes dos Dados"):
                st.markdown("""
                **Dados Reais:**
                - **IPCA**: IBGE (Instituto Brasileiro de Geografia e Estat√≠stica)
                - **Taxa Selic**: BCB (Banco Central do Brasil)
                - **C√¢mbio USD/BRL**: BCB (Banco Central do Brasil)
                - **D√©ficit Prim√°rio**: Tesouro Nacional / BCB
                - **Arrecada√ß√£o IOF**: Receita Federal / BCB
                
                **Dados de Amostragem:**
                - **PIB**: Dados simulados baseados em padr√µes hist√≥ricos
                - **Taxa de Desemprego**: Dados simulados baseados em padr√µes hist√≥ricos
                
                **Metodologia:**
                - **Proje√ß√µes**: Facebook Prophet com sazonalidade autom√°tica
                - **Cache**: Sistema otimizado para performance
                - **Atualiza√ß√£o**: Dados atualizados periodicamente via APIs oficiais
                
                **Limita√ß√µes:**
                - Proje√ß√µes s√£o estimativas baseadas em dados hist√≥ricos
                - Dados de amostra s√£o apenas para demonstra√ß√£o
                - Resultados n√£o constituem recomenda√ß√£o de investimento
                """)
        
        with col2:
            st.markdown("""
            <div style='text-align: center; padding: 20px; background-color: #f0f2f6; border-radius: 10px;'>
                <h4>üìä Dashboard Econ√¥mico</h4>
                <p><strong>Desenvolvido por:</strong><br>M√°rcio Lemos</p>
                <p><small>Term√¥metro da Economia Brasileira<br>Vers√£o 2.0</small></p>
            </div>
            """, unsafe_allow_html=True)
    
    except Exception as e:
        logger.error(f"Erro na fun√ß√£o principal: {e}")
        st.error(f"Erro inesperado: {e}")
        st.info("Tente recarregar a p√°gina ou verificar os logs para mais detalhes.")

if __name__ == "__main__":
    main()


