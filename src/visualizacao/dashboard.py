"""
M√≥dulo principal do dashboard interativo de indicadores econ√¥micos brasileiros.

Este m√≥dulo implementa o dashboard interativo com visualiza√ß√µes, filtros,
compara√ß√µes e proje√ß√µes para indicadores econ√¥micos brasileiros.
"""
import os
import sys
import json
import logging
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Any, Tuple

# Configurar p√°gina
st.set_page_config(
    page_title="Dashboard de Indicadores Socioecon√¥micos Brasileiros",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Detectar e configurar caminhos automaticamente
def setup_paths():
    """Configura os caminhos de importa√ß√£o automaticamente"""
    current_file = os.path.abspath(__file__)
    current_dir = os.path.dirname(current_file)
    
    # Procurar pelo diret√≥rio raiz do projeto (que cont√©m 'src')
    projeto_root = current_dir
    while projeto_root != os.path.dirname(projeto_root):  # N√£o chegou na raiz do sistema
        if os.path.exists(os.path.join(projeto_root, 'src')):
            break
        projeto_root = os.path.dirname(projeto_root)
    
    # Se n√£o encontrou, assumir que est√° em src/visualizacao
    if not os.path.exists(os.path.join(projeto_root, 'src')):
        projeto_root = os.path.dirname(os.path.dirname(current_dir))
    
    src_path = os.path.join(projeto_root, 'src')
    
    # Adicionar caminhos ao PYTHONPATH
    if src_path not in sys.path:
        sys.path.insert(0, src_path)
    if projeto_root not in sys.path:
        sys.path.insert(0, projeto_root)
    
    return projeto_root, src_path

# Configurar caminhos
try:
    PROJETO_ROOT, SRC_PATH = setup_paths()
    st.success(f"‚úÖ Caminhos configurados: {PROJETO_ROOT}")
except Exception as e:
    st.error(f"‚ùå Erro ao configurar caminhos: {e}")
    st.stop()

# Importar sistema de cache e configura√ß√£o
try:
    from utils.cache import cache_manager, dataframe_cache
    from utils.config import config_manager
    st.success("‚úÖ Utilit√°rios importados com sucesso")
except ImportError as e:
    st.warning(f"‚ö†Ô∏è Utilit√°rios n√£o dispon√≠veis: {e}")
    # Criar mocks b√°sicos
    class MockCache:
        def get(self, key): return None
        def set(self, key, value, ttl=None): pass
        def clear(self): pass
    
    class MockConfig:
        def get(self, key, default=None): return default
    
    cache_manager = MockCache()
    dataframe_cache = MockCache()
    config_manager = MockConfig()

# Importar m√≥dulos do projeto
try:
    from dados.extratores.bcb import ExtratorBCB
    from dados.extratores.ibge import ExtratorIBGE
    from dados.processadores.previsao import PrevisorSeriesTemporal
    st.success("‚úÖ M√≥dulos de dados importados com sucesso")
except ImportError as e:
    st.error(f"‚ùå Erro ao importar m√≥dulos de dados: {e}")
    st.info("Verifique se todos os arquivos do projeto est√£o presentes.")
    
    # Criar classes mock para permitir execu√ß√£o b√°sica
    class MockExtrator:
        def __init__(self, *args, **kwargs): pass
        def extrair_dados(self, *args, **kwargs): return pd.DataFrame()
    
    class MockPrevisor:
        def __init__(self, *args, **kwargs): pass
        def gerar_previsao(self, *args, **kwargs): return pd.DataFrame(), {}
    
    ExtratorBCB = MockExtrator
    ExtratorIBGE = MockExtrator
    PrevisorSeriesTemporal = MockPrevisor
    
    st.warning("‚ö†Ô∏è Executando em modo de demonstra√ß√£o com dados mock")

# Constantes
DIRETORIO_DADOS = os.path.join(PROJETO_ROOT, "data")

def verificar_ambiente():
    """Verifica se o ambiente est√° configurado corretamente"""
    problemas = []
    
    # Verificar diret√≥rio de dados
    if not os.path.exists(DIRETORIO_DADOS):
        problemas.append(f"Diret√≥rio de dados n√£o encontrado: {DIRETORIO_DADOS}")
    
    # Verificar arquivos de dados essenciais
    arquivos_essenciais = ['ipca.json', 'selic.json', 'cambio.json']
    for arquivo in arquivos_essenciais:
        caminho = os.path.join(DIRETORIO_DADOS, arquivo)
        if not os.path.exists(caminho):
            problemas.append(f"Arquivo de dados n√£o encontrado: {arquivo}")
    
    return problemas

def carregar_dados() -> Dict[str, pd.DataFrame]:
    """
    Carrega dados dos indicadores econ√¥micos com cache.
    
    Returns:
        Dict[str, pd.DataFrame]: Dicion√°rio com DataFrames dos indicadores
    """
    # Verificar cache primeiro
    dados_cache = cache_manager.get("dados_indicadores")
    if dados_cache is not None:
        logger.info("Dados carregados do cache")
        return dados_cache
    
    logger.info("Carregando dados dos arquivos...")
    
    # Inicializar dicion√°rio com DataFrames vazios
    dados_indicadores = {
        'ipca': pd.DataFrame(),
        'selic': pd.DataFrame(),
        'cambio': pd.DataFrame(),
        'deficit_primario': pd.DataFrame(),
        'iof': pd.DataFrame(),
        'pib': pd.DataFrame(),
        'desemprego': pd.DataFrame()
    }
    
    # Mapeamento de indicadores para arquivos
    arquivos_dados = {
        'ipca': 'ipca.json',
        'selic': 'selic.json',
        'cambio': 'cambio.json',
        'deficit_primario': 'deficit_primario.json',
        'iof': 'arrecadacao_iof.json',
        'pib': 'pib.json',
        'desemprego': 'desemprego.json'
    }
    
    # Carregar cada arquivo
    for id_indicador, nome_arquivo in arquivos_dados.items():
        try:
            caminho_arquivo = os.path.join(DIRETORIO_DADOS, nome_arquivo)
            
            if os.path.exists(caminho_arquivo):
                with open(caminho_arquivo, 'r', encoding='utf-8') as f:
                    dados_json = json.load(f)
                
                if dados_json:
                    df = pd.DataFrame(dados_json)
                    if 'data' in df.columns:
                        df['data'] = pd.to_datetime(df['data'])
                        df = df.sort_values('data')
                    dados_indicadores[id_indicador] = df
                    logger.info(f"Carregados {len(df)} registros para {id_indicador}")
                else:
                    logger.warning(f"Arquivo vazio para {id_indicador}")
            else:
                logger.warning(f"Arquivo n√£o encontrado para {id_indicador}: {caminho_arquivo}")
                
        except Exception as e:
            logger.error(f"Erro ao carregar dados de {id_indicador}: {e}")
    
    # Salvar no cache por 1 hora
    cache_manager.set("dados_indicadores", dados_indicadores, ttl=3600)
    
    return dados_indicadores

def obter_coluna_valor(df: pd.DataFrame, indicador: str) -> str:
    """
    Determina qual coluna usar para valores baseado no indicador e colunas dispon√≠veis.
    
    Args:
        df: DataFrame com os dados
        indicador: Nome do indicador
        
    Returns:
        str: Nome da coluna a usar para valores
    """
    if df.empty:
        return 'valor'
    
    colunas = df.columns.tolist()
    
    # Mapeamento preferencial por indicador
    mapeamento_colunas = {
        'ipca': ['valor', 'variacao_mensal', 'indice'],
        'selic': ['valor', 'taxa', 'meta_selic'],
        'cambio': ['valor', 'cotacao_compra', 'cotacao_venda', 'cotacao'],
        'deficit_primario': ['valor', 'resultado', 'deficit'],
        'iof': ['valor', 'arrecadacao', 'receita'],
        'pib': ['valor', 'variacao_trimestral', 'pib_variacao'],
        'desemprego': ['valor', 'taxa_desocupacao', 'taxa']
    }
    
    # Tentar colunas preferenciais para o indicador
    if indicador in mapeamento_colunas:
        for coluna_pref in mapeamento_colunas[indicador]:
            if coluna_pref in colunas:
                return coluna_pref
    
    # Fallback para colunas comuns
    colunas_comuns = ['valor', 'value', 'taxa', 'cotacao', 'indice', 'variacao']
    for coluna_comum in colunas_comuns:
        if coluna_comum in colunas:
            return coluna_comum
    
    # Se nenhuma coluna conhecida, usar a segunda coluna (assumindo primeira √© data)
    if len(colunas) > 1:
        return colunas[1]
    
    return 'valor'  # Fallback final

def main():
    """Fun√ß√£o principal do dashboard"""
    
    # Verificar ambiente
    problemas = verificar_ambiente()
    if problemas:
        st.error("‚ùå Problemas detectados no ambiente:")
        for problema in problemas:
            st.write(f"‚Ä¢ {problema}")
        st.info("üí° Certifique-se de que est√° executando a partir do diret√≥rio correto do projeto")
        return
    
    # T√≠tulo principal
    st.title("üìä Term√¥metro da Economia Brasileira")
    st.markdown("### Dashboard Interativo de Indicadores Econ√¥micos")
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("‚ÑπÔ∏è Informa√ß√µes")
        st.write("**Desenvolvido por:** M√°rcio Lemos")
        st.write("**Projeto:** MBA - An√°lise Econ√¥mica")
        st.write("**Vers√£o:** 2.0.1 (Corrigida)")
        
        # Status do sistema
        st.subheader("üîß Status do Sistema")
        st.success("‚úÖ Dashboard funcionando")
        st.info(f"üìÅ Dados: {DIRETORIO_DADOS}")
        
        # Bot√£o para limpar cache
        if st.button("üóëÔ∏è Limpar Cache"):
            cache_manager.clear()
            st.success("Cache limpo!")
            st.experimental_rerun()
    
    try:
        # Carregar dados
        with st.spinner("Carregando dados..."):
            dados = carregar_dados()
        
        # Verificar se h√° dados
        dados_disponiveis = {k: v for k, v in dados.items() if not v.empty}
        
        if not dados_disponiveis:
            st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel. Verifique os arquivos de dados.")
            return
        
        st.success(f"‚úÖ Dados carregados: {len(dados_disponiveis)} indicadores")
        
        # Configura√ß√£o dos indicadores
        config_indicadores = {
            'ipca': {
                'nome': 'IPCA (Amostra)' if 'ipca' in dados_disponiveis else 'IPCA',
                'unidade': '%',
                'cor': '#FF6B6B',
                'descricao': '√çndice de Pre√ßos ao Consumidor Amplo'
            },
            'selic': {
                'nome': 'Taxa Selic',
                'unidade': '% a.a.',
                'cor': '#4ECDC4',
                'descricao': 'Taxa b√°sica de juros da economia'
            },
            'cambio': {
                'nome': 'C√¢mbio USD/BRL',
                'unidade': 'R$',
                'cor': '#45B7D1',
                'descricao': 'Taxa de c√¢mbio D√≥lar/Real'
            },
            'deficit_primario': {
                'nome': 'D√©ficit Prim√°rio',
                'unidade': 'R$ bi',
                'cor': '#96CEB4',
                'descricao': 'Resultado prim√°rio do governo'
            },
            'iof': {
                'nome': 'Arrecada√ß√£o IOF',
                'unidade': 'R$ mi',
                'cor': '#FFEAA7',
                'descricao': 'Imposto sobre Opera√ß√µes Financeiras'
            },
            'pib': {
                'nome': 'PIB (Amostra)',
                'unidade': '%',
                'cor': '#DDA0DD',
                'descricao': 'Produto Interno Bruto - varia√ß√£o trimestral'
            },
            'desemprego': {
                'nome': 'Taxa de Desemprego (Amostra)',
                'unidade': '%',
                'cor': '#F8B500',
                'descricao': 'Taxa de desocupa√ß√£o'
            }
        }
        
        # Filtrar apenas indicadores dispon√≠veis
        config_indicadores = {k: v for k, v in config_indicadores.items() if k in dados_disponiveis}
        
        # Seletor de indicadores
        st.subheader("üìà Sele√ß√£o de Indicadores")
        
        indicadores_selecionados = st.multiselect(
            "Escolha os indicadores para visualizar:",
            options=list(config_indicadores.keys()),
            default=list(config_indicadores.keys())[:3],  # Primeiros 3 por padr√£o
            format_func=lambda x: config_indicadores[x]['nome']
        )
        
        if not indicadores_selecionados:
            st.warning("‚ö†Ô∏è Selecione pelo menos um indicador")
            return
        
        # Visualiza√ß√µes
        st.subheader("üìä Visualiza√ß√µes")
        
        # Criar gr√°ficos para cada indicador selecionado
        for indicador in indicadores_selecionados:
            df = dados[indicador]
            config = config_indicadores[indicador]
            
            if df.empty:
                continue
            
            st.write(f"**{config['nome']}** - {config['descricao']}")
            
            # Determinar coluna de valor
            coluna_valor = obter_coluna_valor(df, indicador)
            
            if coluna_valor not in df.columns:
                st.error(f"Coluna '{coluna_valor}' n√£o encontrada em {indicador}")
                continue
            
            # Criar gr√°fico
            fig = px.line(
                df, 
                x='data', 
                y=coluna_valor,
                title=f"{config['nome']} ao longo do tempo",
                color_discrete_sequence=[config['cor']]
            )
            
            fig.update_layout(
                xaxis_title="Data",
                yaxis_title=f"{config['nome']} ({config['unidade']})",
                hovermode='x unified'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Estat√≠sticas b√°sicas
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("√öltimo Valor", f"{df[coluna_valor].iloc[-1]:.2f} {config['unidade']}")
            
            with col2:
                variacao = df[coluna_valor].pct_change().iloc[-1] * 100
                st.metric("Varia√ß√£o (%)", f"{variacao:.2f}%")
            
            with col3:
                st.metric("M√°ximo", f"{df[coluna_valor].max():.2f} {config['unidade']}")
            
            with col4:
                st.metric("M√≠nimo", f"{df[coluna_valor].min():.2f} {config['unidade']}")
            
            st.divider()
    
    except Exception as e:
        st.error(f"‚ùå Erro no dashboard: {e}")
        logger.error(f"Erro no dashboard: {e}")
        
        # Informa√ß√µes de debug
        with st.expander("üîç Informa√ß√µes de Debug"):
            st.write("**Diret√≥rio atual:**", os.getcwd())
            st.write("**Diret√≥rio do projeto:**", PROJETO_ROOT)
            st.write("**Diret√≥rio src:**", SRC_PATH)
            st.write("**Diret√≥rio de dados:**", DIRETORIO_DADOS)
            st.write("**Python path:**", sys.path[:5])
    
    # Rodap√©
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666; padding: 20px;'>
            <p><strong>Desenvolvido por M√°rcio Lemos</strong></p>
            <p>Projeto Final MBA - Term√¥metro da Economia Brasileira</p>
            
            <details style='margin-top: 20px;'>
                <summary>üìä Fontes dos Dados</summary>
                <div style='margin-top: 10px; text-align: left;'>
                    <h4>Dados Reais:</h4>
                    <ul>
                        <li><strong>IPCA, PIB, Desemprego:</strong> IBGE (Instituto Brasileiro de Geografia e Estat√≠stica)</li>
                        <li><strong>Taxa Selic, C√¢mbio:</strong> BCB (Banco Central do Brasil)</li>
                        <li><strong>D√©ficit Prim√°rio:</strong> Tesouro Nacional / BCB</li>
                        <li><strong>Arrecada√ß√£o IOF:</strong> Receita Federal do Brasil</li>
                    </ul>
                    <h4>Dados Simulados:</h4>
                    <ul>
                        <li>Modelos de Previs√£o Estat√≠stica</li>
                    </ul>
                </div>
            </details>
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
